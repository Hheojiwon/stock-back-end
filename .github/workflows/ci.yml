name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle Wrapper 파일에 실행 권한 부여 (investement 디렉토리)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./investement  # investement 디렉토리에서 실행

      # Gradle 빌드 실행 (investement 디렉토리)
      - name: Build with Gradle
        run: ./gradlew build -x test
        working-directory: ./investement  # investement 디렉토리에서 실행

      # Docker 이미지 빌드 (investement 디렉토리에서 실행)
      - name: Build Docker image
        run: |
          docker build -t seungboong/stockservice ./investement  # Dockerfile이 있는 디렉토리 지정

      # AWS ECR에 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1.4.0
        with:
          region: ap-northeast-2  # AWS 리전 설정 (서울 리전)

      # Docker 이미지 태그 및 ECR로 푸시
      - name: Tag and push to ECR
        run: |
          IMAGE_REPO=864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo
          docker tag seungboong/stockservice:latest $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # EC2 서버에 SSH로 접속하여 배포
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 13.209.73.178
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop stockservice || true
            docker rm stockservice || true
            docker pull 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo:latest
            docker run -d --name stockservice -p 8080:8080 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo:latest
