name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2
      
      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. application.properties 파일 생성 및 GitHub Secrets 값 적용
      - name: Create and update application.properties
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
          echo "spring.application.name=${{ secrets.SPRING_APPLICATION_NAME }}" > ./src/main/resources/application.properties
          echo "naver.api.clientId=${{ secrets.NAVER_API_CLIENTID }}" >> ./src/main/resources/application.properties
          echo "naver.api.clientSecret=${{ secrets.NAVER_API_KEY }}" >> ./src/main/resources/application.properties
          echo "serviceKey=${{ secrets.SERVICEKEY }}" >> ./src/main/resources/application.properties
          echo "api.tr_id=${{ secrets.API_TRID }}" >> ./src/main/resources/application.properties
          echo "api.app_secret=${{ secrets.API_APP_SECRET }}" >> ./src/main/resources/application.properties
          echo "api.app_key=${{ secrets.API_APP_KEY }}" >> ./src/main/resources/application.properties
          echo "api.access_token=${{ secrets.API_ACCESS_TOKEN }}" >> ./src/main/resources/application.properties
          echo "api.approval_key=${{ secrets.API_APPROVAL_KEY }}" >> ./src/main/resources/application.properties
          echo "marketCapitalization.tr_id=${{ secrets.MARKET_TR_ID }}" >> ./src/main/resources/application.properties
          echo "fluctuation.tr_id=${{ secrets.FLUCTUATION_TR_ID }}" >> ./src/main/resources/application.properties
          echo "financialRatio.tr_id=${{ secrets.FINANCIAL_TR_ID }}" >> ./src/main/resources/application.properties
          echo "consensus.tr_id=${{ secrets.CONSENSUS_TR_ID }}" >> ./src/main/resources/application.properties
          echo "stock.tr_id=${{ secrets.STOCK_TR_ID }}" >> ./src/main/resources/application.properties
          echo "websocket.key=${{ secrets.WEBSOCKET_KEY }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> ./src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> ./src/main/resources/application.properties
          cat ./src/main/resources/application.properties

      # 4. Gradle Wrapper 파일에 실행 권한 부여 (investement 디렉토리)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./investement

      # 5. Gradle 빌드 실행 (investement 디렉토리)
      - name: Build with Gradle
        run: ./gradlew build -x test
        working-directory: ./investement

      # 6. Docker 이미지 빌드 (investement 디렉토리에서 실행)
      - name: Build Docker image
        run: docker build -t seungboong/stockservice ./investement

      # 7. AWS ECR에 로그인 (AWS CLI 사용)
      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-northeast-2
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com

      # 8. Docker 이미지 태그 및 ECR로 푸시
      - name: Tag and push to ECR
        run: |
          IMAGE_REPO=864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo
          docker tag seungboong/stockservice:latest $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 9. EC2 서버에 SSH로 접속하여 배포
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 13.209.73.178
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
           # AWS ECR 로그인 갱신
           aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com
           docker stop stockservice || true
           docker rm stockservice || true
           docker pull 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo:latest
           docker run -d --name stockservice -p 8080:8080 864899864038.dkr.ecr.ap-northeast-2.amazonaws.com/stockrepo:latest
