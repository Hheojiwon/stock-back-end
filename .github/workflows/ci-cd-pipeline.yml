name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build

      # Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t investement-backend .

      # SSH를 통해 EC2에 배포
      - name: Set up SSH for EC2 access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ec2-13-125-177-110.ap-northeast-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Deploy to EC2 (Blue/Green deployment)
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@13.125.177.110 "
            # 새로운 컨테이너를 배경에서 실행
            docker run -d -p 8081:8080 --name investement-backend-new investement-backend:latest

            # 새 컨테이너가 잘 실행되었는지 확인 (임시 포트에서 확인)
            if curl --silent --fail http://localhost:8081; then
              # 새 컨테이너가 정상적으로 작동하면 기존 컨테이너를 중지하고 제거
              docker stop investement-backend || true
              docker rm investement-backend || true
              
              # 새로운 컨테이너를 메인 포트로 전환
              docker rename investement-backend-new investement-backend
            else
              echo '새 컨테이너가 작동하지 않음. 롤백 필요.'
            fi
          "
